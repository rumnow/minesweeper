const fieldSize = 100;
const minesCount: number = 10;
const fieldWidth = Math.sqrt(fieldSize);
const arrField: number[] = new Array(fieldSize).fill(0);
const arrChecked: boolean[] = new Array(fieldSize).fill(false);

const buttonsContainer = document.querySelector('.buttons');

//—Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã
let i: number = 0;
let setRandomNine = () => {
    let r: number = Math.floor(Math.random() * fieldSize);
    if (arrField[r] !== 9) {
        arrField[r] = 9;
        i++;
    } else {
        setRandomNine();
    }
}
while (i < minesCount) {
    setRandomNine();
}

//—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
buttonsContainer?.setAttribute('style', `grid-template-columns: repeat(${fieldWidth}, 1fr);`);
arrField.forEach((_, index) => {
    const button = document.createElement('button');
    //button.textContent = value.toString();
    //button.setAttribute('data-value', value.toString());
    button.setAttribute('index', index.toString());
    buttonsContainer?.appendChild(button);

    button.addEventListener('click', function() {
        arrChecked[index] = true;
        if (this.textContent !== '‚õ≥Ô∏è'){ //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–ª–∞–∂–æ–∫
            if (arrField[Number(this.getAttribute('index'))] === 9) {
                //const allBombs = document.querySelectorAll(`button[index="${index}"]`);
                for (let indBomb in arrField) {
                    if (arrField[indBomb] === 9) {
                        const cell = document.querySelector(`button[index="${indBomb}"]`) as HTMLButtonElement;
                        cell.textContent = 'üí£'; //–µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –±–æ–º–±—É
                        cell.setAttribute('data-value', 'üí£');
                    }
                }
            } else {  // –≤—ã–±–∏—Ä–∞–µ–º —Å–æ—Å–µ–¥–µ–π
                let mines: number = 0;
                let currentIndex = Number(this.getAttribute('index'));
                let neighborI: number[] = [];
                switch (true){
                    case (currentIndex === 0): //–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                        neighborI = [1, fieldWidth, fieldWidth+1];
                        break;
                    case (currentIndex === fieldWidth-1): //–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                        neighborI = [-1, fieldWidth, fieldWidth-1];
                        break;
                    case (currentIndex < fieldWidth): //–≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
                        neighborI = [-1, 1, fieldWidth, fieldWidth-1, fieldWidth+1];
                        break;
                    case (currentIndex === fieldSize-fieldWidth): //–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                        neighborI = [1, -fieldWidth, -fieldWidth+1];
                        break;
                    case (currentIndex === fieldSize-1): //–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                        neighborI = [-1, -fieldWidth, fieldWidth-1];
                        break;
                    case (currentIndex > fieldSize - fieldWidth): //–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞
                        neighborI = [-1, 1, -fieldWidth, -fieldWidth-1, -fieldWidth+1];
                        break;
                    case ((currentIndex) % fieldWidth === 0): //–ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                        neighborI = [-fieldWidth, -fieldWidth+1, 1, fieldWidth, fieldWidth+1]
                        break;
                    case ((currentIndex + 1) % fieldWidth === 0): //–ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                        neighborI = [-fieldWidth-1, -fieldWidth, -1, fieldWidth, fieldWidth-1];
                        break;
                    default: //–æ–±—ã—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ 8 —Å–æ—Å–µ–¥–µ–π
                        neighborI = [-fieldWidth-1, -fieldWidth, -fieldWidth+1, -1, 1,
                            fieldWidth, fieldWidth-1, fieldWidth+1];
                        //console.log(currentIndex);
                }
                neighborI.forEach(element => { //—Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥
                    if (arrField[currentIndex + element] === 9){
                        mines++;
                    }
                });
                mines !== 0 ? this.textContent = mines.toString(): this.textContent = '';
                this.setAttribute('data-value', mines.toString());
                //—Å—é–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ–±—Å—á–µ—Ç –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ —Ä—è–¥–æ–º
                if (arrField[currentIndex] === 0) {
                    console.log(arrField[currentIndex]);
                    checkEmptyCell(currentIndex);
                }
            }
        }
    });
    button.addEventListener('contextmenu', function(event) {
        event.preventDefault();
        this.textContent === '‚õ≥Ô∏è' ? this.textContent =
            this.getAttribute('data-value'.toString()) : this.textContent = '‚õ≥Ô∏è';
    });
});

function checkEmptyCell(index: number): void {
    let neighborI: number[] = [];
    switch (true){
        case (index === 0): //–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            neighborI = [1, fieldWidth];
            break;
        case (index === fieldWidth-1): //–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            neighborI = [-1, fieldWidth];
            break;
        case (index < fieldWidth): //–≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            neighborI = [-1, 1, fieldWidth];
            break;
        case (index === fieldSize-fieldWidth): //–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            neighborI = [1, -fieldWidth];
            break;
        case (index === fieldSize-1): //–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            neighborI = [-1, -fieldWidth];
            break;
        case (index > fieldSize - fieldWidth): //–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            neighborI = [-1, 1, -fieldWidth];
            break;
        case ((index) % fieldWidth === 0): //–ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            neighborI = [-fieldWidth, 1, fieldWidth]
            break;
        case ((index + 1) % fieldWidth === 0): //–ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            neighborI = [-fieldWidth, -1, fieldWidth];
            break;
        default: //–æ–±—ã—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ 4 —Å–æ—Å–µ–¥–∞
            neighborI = [-fieldWidth, -1, 1, fieldWidth];
            //console.log(currentIndex);
    }
    const cell = document.querySelector(`button[index="${index}"]`) as HTMLButtonElement;
    cell.setAttribute('data-value', "0");
    console.log(cell);
    neighborI.forEach(element => {
        if (arrField[index + element] === 0 && cell.getAttribute('data-value') !== "0" ){
            checkEmptyCell(index + element);
        }
    });
}
