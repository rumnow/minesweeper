const fieldSize = 100; //–≤—Å–µ–≥–æ –∫–ª–µ—Ç–æ–∫
const minesCount: number = 10; //–≤—Å–µ–≥–æ –º–∏–Ω
const fieldWidth = Math.sqrt(fieldSize); //—à–∏—Ä–∏–Ω–∞ –ø–æ–ª—è
let arrField: number[] = new Array(fieldSize).fill(0); //–∫–ª–µ—Ç–∫–∏ —Å –º–∏–Ω–∞–º–∏
const arrChecked: boolean[] = new Array(fieldSize).fill(false); //–∫–ª–µ—Ç–∫–∏ –∫—É–¥–∞ —É–∂–µ —Ç—ã–∫–∞–ª–∏
let minesLeft: number = minesCount;
const buttonsContainer = document.querySelector('.buttons');
const playerNameInput = document.getElementById('playerName');
const timeElapsedInput = document.getElementById('timeElapsed');
const minesLeftInput: HTMLInputElement = document.getElementById('minesLeft') as HTMLInputElement;
minesLeftInput.value = minesCount.toString();
//—Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã
let i: number = 0;
let setRandomNine = () => {
    let r: number = Math.floor(Math.random() * fieldSize);
    if (arrField[r] !== 9) {
        arrField[r] = 9;
        i++;
    } else {
        setRandomNine();
    }
}
while (i < minesCount) {
    setRandomNine();
}
//—Å—á–∏—Ç–∞–µ–º —Å–æ—Å–µ–¥–µ–π
// for (let [index, value] of arrField.entries()){
//     if (value !== 9 ){
//         arrField[index] = checkMinesCount(index);
//     }
// }
//console.log(arrField);
//—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
buttonsContainer?.setAttribute('style', `grid-template-columns: repeat(${fieldWidth}, 1fr);`);
arrField.forEach((value, index) => {
    if (value !== 9 ){
        arrField[index] = checkMinesCount(index);
        //console.log(arrField[index]);
    }
    const button = document.createElement('button');
    button?.setAttribute('index', index.toString());
    buttonsContainer?.appendChild(button);

    button.addEventListener('click', function() {
        arrChecked[index] = true;
        if (this.textContent !== '‚õ≥Ô∏è'){ //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–ª–∞–∂–æ–∫
            if (arrField[Number(this.getAttribute('index'))] === 9) {
                //const allBombs = document.querySelectorAll(`button[index="${index}"]`);
                for (let indBomb in arrField) {
                    if (arrField[indBomb] === 9) {
                        const cell = document.querySelector(`button[index="${indBomb}"]`) as HTMLButtonElement;
                        cell.textContent = 'üí£'; //–µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –±–æ–º–±—É
                        cell?.setAttribute('data-value', 'üí£');
                    }
                }
            } else {  // –≤—ã–±–∏—Ä–∞–µ–º —Å–æ—Å–µ–¥–µ–π
                let currentIndex = Number(this.getAttribute('index'));
                let mines: number = checkMinesCount(currentIndex);
                if (mines !== 0) {
                    this.textContent = mines.toString()
                    arrField[currentIndex] = mines;
                } else {
                    this.textContent = '';
                    checkEmptyCell(currentIndex);
                    //this.setAttribute('checked', '0');
                }
                this.setAttribute('checked', '1');
            }
        }
        win();
    });
    button.addEventListener('contextmenu', function(event) {
        event.preventDefault();
        if (this.textContent === '‚õ≥Ô∏è') {
            if (this.getAttribute('checked') === '1' && arrField[index] > 0) {
                this.textContent = arrField[index].toString();
            } else {
                this.textContent = '';
            }
            minesLeft++;
        } else if (minesLeft > 0){
            this.textContent = '‚õ≥Ô∏è';
            minesLeft--;
        }
        minesLeftInput.value = minesLeft.toString();
        win();
    });
});
//win?
function win(): void {
    if (fieldSize === minesCount + arrChecked.filter(value => value === true).length) {
        alert('You win!');
    }
}
//—Å—á–∏—Ç–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –º–∏–Ω—ã —Ä—è–¥–æ–º
function checkMinesCount(index: number): number {
    let mines: number = 0;
    let neighborI: number[] = [];
    switch (true){
        case (index === 0): //–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            neighborI = [1, fieldWidth, fieldWidth+1];
            break;
        case (index === fieldWidth-1): //–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            neighborI = [-1, fieldWidth, fieldWidth-1];
            break;
        case (index < fieldWidth): //–≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            neighborI = [-1, 1, fieldWidth, fieldWidth-1, fieldWidth+1];
            break;
        case (index === fieldSize-fieldWidth): //–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            neighborI = [1, -fieldWidth, -fieldWidth+1];
            break;
        case (index === fieldSize-1): //–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            neighborI = [-1, -fieldWidth, fieldWidth-1];
            break;
        case (index > fieldSize - fieldWidth): //–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            neighborI = [-1, 1, -fieldWidth, -fieldWidth-1, -fieldWidth+1];
            break;
        case ((index) % fieldWidth === 0): //–ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            neighborI = [-fieldWidth, -fieldWidth+1, 1, fieldWidth, fieldWidth+1]
            break;
        case ((index + 1) % fieldWidth === 0): //–ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            neighborI = [-fieldWidth-1, -fieldWidth, -1, fieldWidth, fieldWidth-1];
            break;
        default: //–æ–±—ã—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ 8 —Å–æ—Å–µ–¥–µ–π
            neighborI = [-fieldWidth-1, -fieldWidth, -fieldWidth+1, -1, 1,
                fieldWidth, fieldWidth-1, fieldWidth+1];
    }
    neighborI.forEach(element => { //—Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥
        if (arrField[index + element] === 9){
            mines++;
        }
    });
    return mines;
}
//—Å—á–∏—Ç–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
function checkEmptyCell(index: number): void {
    let neighborI: number[] = [];
    switch (true){
        case (index === 0): //–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            neighborI = [1, fieldWidth];
            break;
        case (index === fieldWidth-1): //–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            neighborI = [-1, fieldWidth];
            break;
        case (index < fieldWidth): //–≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            neighborI = [-1, 1, fieldWidth];
            break;
        case (index === fieldSize-fieldWidth): //–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            neighborI = [1, -fieldWidth];
            break;
        case (index === fieldSize-1): //–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            neighborI = [-1, -fieldWidth];
            break;
        case (index > fieldSize - fieldWidth): //–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            neighborI = [-1, 1, -fieldWidth];
            break;
        case ((index) % fieldWidth === 0): //–ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            neighborI = [-fieldWidth, 1, fieldWidth]
            break;
        case ((index + 1) % fieldWidth === 0): //–ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            neighborI = [-fieldWidth, -1, fieldWidth];
            break;
        default: //–æ–±—ã—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ 4 —Å–æ—Å–µ–¥–∞
            neighborI = [-fieldWidth, -1, 1, fieldWidth];
            //console.log(currentIndex);
    }
    neighborI.forEach(element => {
        const cell: HTMLButtonElement =
        document.querySelector(`button[index="${index+element}"]`) as HTMLButtonElement;
        if (arrField[index + element] === 0 && !arrChecked[index + element]
                                            && checkMinesCount(index + element) === 0 ){
            arrChecked[index + element] = true;
            cell?.setAttribute('checked', '1');
            checkEmptyCell(index + element);
        } else if (arrField[index + element] !== 0 && !arrChecked[index + element] ){
            arrChecked[index + element] = true;
            cell.textContent = arrField[index + element].toString(); //checkMinesCount(index + element).toString()
            cell?.setAttribute('checked', '1');
        }
    });
}
