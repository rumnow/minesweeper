var fieldSize = 100;
var minesCount = 10;
var fieldWidth = Math.sqrt(fieldSize);
var arrField = new Array(fieldSize).fill(0);
var arrChecked = new Array(fieldSize).fill(false);
var buttonsContainer = document.querySelector('.buttons');
//—Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã
var i = 0;
var setRandomNine = function () {
    var r = Math.floor(Math.random() * fieldSize);
    if (arrField[r] !== 9) {
        arrField[r] = 9;
        i++;
    }
    else {
        setRandomNine();
    }
};
while (i < minesCount) {
    setRandomNine();
}
//—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
buttonsContainer === null || buttonsContainer === void 0 ? void 0 : buttonsContainer.setAttribute('style', "grid-template-columns: repeat(" + fieldWidth + ", 1fr);");
arrField.forEach(function (_, index) {
    var button = document.createElement('button');
    //button.textContent = value.toString();
    //button.setAttribute('data-value', value.toString());
    button.setAttribute('index', index.toString());
    buttonsContainer === null || buttonsContainer === void 0 ? void 0 : buttonsContainer.appendChild(button);
    button.addEventListener('click', function () {
        arrChecked[index] = true;
        if (this.textContent !== '‚õ≥Ô∏è') { //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–ª–∞–∂–æ–∫
            if (arrField[Number(this.getAttribute('index'))] === 9) {
                //const allBombs = document.querySelectorAll(`button[index="${index}"]`);
                for (var indBomb in arrField) {
                    if (arrField[indBomb] === 9) {
                        var cell = document.querySelector("button[index=\"" + indBomb + "\"]");
                        cell.textContent = 'üí£'; //–µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –±–æ–º–±—É
                        cell.setAttribute('data-value', 'üí£');
                    }
                }
            }
            else { // –≤—ã–±–∏—Ä–∞–µ–º —Å–æ—Å–µ–¥–µ–π
                var mines_1 = 0;
                var currentIndex_1 = Number(this.getAttribute('index'));
                var neighborI = [];
                switch (true) {
                    case (currentIndex_1 === 0): //–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                        neighborI = [1, fieldWidth, fieldWidth + 1];
                        break;
                    case (currentIndex_1 === fieldWidth - 1): //–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                        neighborI = [-1, fieldWidth, fieldWidth - 1];
                        break;
                    case (currentIndex_1 < fieldWidth): //–≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
                        neighborI = [-1, 1, fieldWidth, fieldWidth - 1, fieldWidth + 1];
                        break;
                    case (currentIndex_1 === fieldSize - fieldWidth): //–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                        neighborI = [1, -fieldWidth, -fieldWidth + 1];
                        break;
                    case (currentIndex_1 === fieldSize - 1): //–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                        neighborI = [-1, -fieldWidth, fieldWidth - 1];
                        break;
                    case (currentIndex_1 > fieldSize - fieldWidth): //–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞
                        neighborI = [-1, 1, -fieldWidth, -fieldWidth - 1, -fieldWidth + 1];
                        break;
                    case ((currentIndex_1) % fieldWidth === 0): //–ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                        neighborI = [-fieldWidth, -fieldWidth + 1, 1, fieldWidth, fieldWidth + 1];
                        break;
                    case ((currentIndex_1 + 1) % fieldWidth === 0): //–ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                        neighborI = [-fieldWidth - 1, -fieldWidth, -1, fieldWidth, fieldWidth - 1];
                        break;
                    default: //–æ–±—ã—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ 8 —Å–æ—Å–µ–¥–µ–π
                        neighborI = [-fieldWidth - 1, -fieldWidth, -fieldWidth + 1, -1, 1,
                            fieldWidth, fieldWidth - 1, fieldWidth + 1];
                    //console.log(currentIndex);
                }
                neighborI.forEach(function (element) {
                    if (arrField[currentIndex_1 + element] === 9) {
                        mines_1++;
                    }
                });
                mines_1 !== 0 ? this.textContent = mines_1.toString() : this.textContent = '';
                this.setAttribute('data-value', mines_1.toString());
                //—Å—é–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ–±—Å—á–µ—Ç –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ —Ä—è–¥–æ–º
                if (arrField[currentIndex_1] === 0) {
                    console.log(arrField[currentIndex_1]);
                    checkEmptyCell(currentIndex_1);
                }
            }
        }
    });
    button.addEventListener('contextmenu', function (event) {
        event.preventDefault();
        this.textContent === '‚õ≥Ô∏è' ? this.textContent =
            this.getAttribute('data-value'.toString()) : this.textContent = '‚õ≥Ô∏è';
    });
});
function checkEmptyCell(index) {
    var neighborI = [];
    switch (true) {
        case (index === 0): //–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            neighborI = [1, fieldWidth];
            break;
        case (index === fieldWidth - 1): //–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            neighborI = [-1, fieldWidth];
            break;
        case (index < fieldWidth): //–≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            neighborI = [-1, 1, fieldWidth];
            break;
        case (index === fieldSize - fieldWidth): //–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            neighborI = [1, -fieldWidth];
            break;
        case (index === fieldSize - 1): //–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            neighborI = [-1, -fieldWidth];
            break;
        case (index > fieldSize - fieldWidth): //–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            neighborI = [-1, 1, -fieldWidth];
            break;
        case ((index) % fieldWidth === 0): //–ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            neighborI = [-fieldWidth, 1, fieldWidth];
            break;
        case ((index + 1) % fieldWidth === 0): //–ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            neighborI = [-fieldWidth, -1, fieldWidth];
            break;
        default: //–æ–±—ã—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ 4 —Å–æ—Å–µ–¥–∞
            neighborI = [-fieldWidth, -1, 1, fieldWidth];
        //console.log(currentIndex);
    }
    var cell = document.querySelector("button[index=\"" + index + "\"]");
    cell.setAttribute('data-value', "0");
    console.log(cell);
    neighborI.forEach(function (element) {
        if (arrField[index + element] === 0 && cell.getAttribute('data-value') !== "0") {
            checkEmptyCell(index + element);
        }
    });
}
